
AVRASM ver. 2.2.8  D:\3rd Semester\COAL\Week 13\AssemblerApplication2\AssemblerApplication2\main.asm Fri Dec 29 12:11:05 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
D:\3rd Semester\COAL\Week 13\AssemblerApplication2\AssemblerApplication2\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
D:\3rd Semester\COAL\Week 13\AssemblerApplication2\AssemblerApplication2\main.asm(2): Including file 'D:\3rd Semester\COAL\Week 13\AssemblerApplication2\AssemblerApplication2\delay.inc'
D:\3rd Semester\COAL\Week 13\AssemblerApplication2\AssemblerApplication2\main.asm(3): Including file 'D:\3rd Semester\COAL\Week 13\AssemblerApplication2\AssemblerApplication2\1602_LCD.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
D:\3rd Semester\COAL\Week 13\AssemblerApplication2\AssemblerApplication2\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
D:\3rd Semester\COAL\Week 13\AssemblerApplication2\AssemblerApplication2\main.asm(2): Including file 'D:\3rd Semester\COAL\Week 13\AssemblerApplication2\AssemblerApplication2\delay.inc'
D:\3rd Semester\COAL\Week 13\AssemblerApplication2\AssemblerApplication2\main.asm(3): Including file 'D:\3rd Semester\COAL\Week 13\AssemblerApplication2\AssemblerApplication2\1602_LCD.inc'
                                 
                                 .include "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .include "delay.inc"
                                 
                                 .macro delay
                                 	push r18
                                 	push r24
                                 	push r25
                                 	ldi r18,@0/10
                                 	L1:
                                 	ldi r24,LOW(39998) ; intialize inner loop count in inner
                                 	ldi r25,HIGH(39998) ; loop high and low registers
                                 	L2:
                                 	sbiw r24,1 ; decrement inner loop registers
                                 	brne L2 ; branch to L2 if iLoop registers != 0
                                 	dec r18 ; decrement outer loop register
                                 	brne L1 ; branch to L1 if outer loop register != 0
                                 	nop ; no operation
                                 	pop r25
                                 	pop r24
                                 	pop r18
                                 .endmacro
                                 .include "1602_LCD.inc"
                                 
                                 
                                 
                                 ; Macro to send a command to control the LCD
                                 .macro LCD_send_a_command
                                 	PUSH r16
                                 	LDI r16,@0 ; receives the command
                                 	OUT PORTD,r16 ; Set the PD0 to PD7 pins according to command bits
                                 	CBI PORTB, PB0 ; set RS pin to LOW (set LCD mode to "Command Mode")
                                 	SBI PORTB, PB1 ; set E pin to HIGH (set LCD to receive the command)
                                 	;delay 50
                                 	delay 10
                                 	CBI PORTB, PB1 ; set E pin to LOW (set LCD to process the command)
                                 	LDI r16,0x00
                                 	OUT PORTD,r16 ; clear the PD0 to PD7 pins after sending the command
                                 	POP r16
                                 .endmacro
                                 
                                 ; Macro to send a single character to display on the LCD
                                 .macro LCD_send_a_character
                                 	PUSH r16
                                 	LDI r16,@0 ; receives the character
                                 	OUT PORTD,r16 ; Set the PD0 to PD7 pins according to command bits
                                 	SBI PORTB, PB0 ; set RS pin to HIGH (set LCD mode to "Data Mode")
                                 	SBI PORTB, PB1 ; set E pin to HIGH (set LCD to receive the command)
                                 	;delay 30
                                 	delay 10
                                 	CBI PORTB, PB1 ; set E pin to LOW (set LCD to process the command)
                                 	LDI r16,0x00
                                 	OUT PORTD,r16 ; clear the PD0 to PD7 pins after sending the command
                                 	POP r16
                                 .endmacro
                                 
                                 
                                 ; Macro to send a string (<256) to display on the LCD
                                 ; the Z register pair should have the address of the buffer
                                 ; R20 should have the length of the buffer
                                 ;	For example:	
                                 ;	LDI             ZL, LOW (2 * hello_string)
                                 ;	LDI             ZH, HIGH (2 * hello_string)
                                 ;	LDI             R20, string_len
                                 ;	
                                 	;it is recommanded to define the strings at the end of the code segment
                                 ;	hello_string:	.db	"Hello World!",10,0
                                 ;	len: .equ	string_len   = 2 * (len - hello_string)
                                 
                                 .macro LCD_send_a_string
                                 	; save the states of R16 and R17
                                 	PUSH            R16
                                 	PUSH            R17
                                 	LCD_writeBuffer_LOOP:
                                 	; load the current byte/character pointed to be Z and increment the Z pointer
                                 	LPM             R16, Z+
                                 	; check if the remaining size of the string is non-zero and return if it is
                                 	CPI             R20, 0
                                 	BREQ            LCD_writeBuffer_END
                                 	LCD_writeBuffer_CHAR:
                                 	OUT PORTD, r16 ; Set the PD0 to PD7 pins according to command bits
                                 	SBI PORTB, PB0 ; set RS pin to HIGH (set LCD mode to "Data Mode")
                                 	SBI PORTB, PB1 ; set E pin to HIGH (set LCD to receive the command)
                                 	;delay 30
                                 	delay 10
                                 	CBI PORTB, PB1 ; set E pin to LOW (set LCD to process the command)
                                 	LDI r16,0x00
                                 	OUT PORTD,r16 ; clear the PD0 to PD7 pins after sending the command
                                 	DEC             R20
                                 	RJMP            LCD_writeBuffer_LOOP
                                 	LCD_writeBuffer_END:
                                 	; restore the states of R16 and R17 and return
                                 	POP             R17
                                 	POP             R16
                                 .endmacro
                                 
                                 
                                 ; Macro to send a register to display its value on the LCD
                                 .macro LCD_send_a_register
                                 	PUSH r16
                                 	MOV r16,@0 ; receives the character
                                 	OUT PORTD,r16 ; Set the PD0 to PD7 pins according to command bits
                                 	SBI PORTB, PB0 ; set RS pin to HIGH (set LCD mode to "Data Mode")
                                 	SBI PORTB, PB1 ; set E pin to HIGH (set LCD to receive the command)
                                 	;delay 30
                                 	delay 10
                                 	CBI PORTB, PB1 ; set E pin to LOW (set LCD to process the command)
                                 	LDI r16,0x00
                                 	OUT PORTD,r16 ; clear the PD0 to PD7 pins after sending the command
                                 	POP r16
                                 .cseg
                                 .org 0x00
                                 
                                 ; Setting pins to Output for LCD
000000 9a50                      sbi DDRD,PD0 ; D0 pin of LCD
000001 9a51                      sbi DDRD,PD1 ; D1
000002 9a52                      sbi DDRD,PD2 ; D2
000003 9a53                      sbi DDRD,PD3 ; D3
000004 9a54                      sbi DDRD,PD4 ; D4
000005 9a55                      sbi DDRD,PD5 ; D5
000006 9a56                      sbi DDRD,PD6 ; D6
000007 9a57                      sbi DDRD,PD7 ; D7
                                 ;Setting LCD Mode selection pins
000008 9a20                      sbi DDRB,PB0 ; RS
000009 9a21                      sbi DDRB,PB1 ; E pin of LCD
                                 ;Setting LCD Backlight pin
00000a 9a25                      sbi DDRB,PB5 ; BLA pin of LCD
                                 ; LCD Init
00000b 930f
00000c e001
00000d b90b
00000e 9828
00000f 9a29
000010 932f
000011 938f
000012 939f
000013 e021
000014 e38e
000015 e99c
000016 9701
000017 f7f1
000018 952a
000019 f7d1
00001a 0000
00001b 919f
00001c 918f
00001d 912f
00001e 9829
00001f e000
000020 b90b
000021 910f                      LCD_send_a_command 0x01 ; sending all clear command
000022 930f
000023 e308
000024 b90b
000025 9828
000026 9a29
000027 932f
000028 938f
000029 939f
00002a e021
00002b e38e
00002c e99c
00002d 9701
00002e f7f1
00002f 952a
000030 f7d1
000031 0000
000032 919f
000033 918f
000034 912f
000035 9829
000036 e000
000037 b90b
000038 910f                      LCD_send_a_command 0x38 ; set LCD mode to 16*2 line LCD
000039 930f
00003a e00c
00003b b90b
00003c 9828
00003d 9a29
00003e 932f
00003f 938f
000040 939f
000041 e021
000042 e38e
000043 e99c
000044 9701
000045 f7f1
000046 952a
000047 f7d1
000048 0000
000049 919f
00004a 918f
00004b 912f
00004c 9829
00004d e000
00004e b90b
00004f 910f                      LCD_send_a_command 0x0C ; screen ON
000050 9a2d                      sbi PORTB,PB5
                                 
000051 9a23                      SBI DDRB, PB3    ; PB3 set as OUTPUT Pin
000052 982b                      CBI PORTB, PB3   ; LED OFF
                                 
000053 9a22                      SBI DDRB, PB2    ; PB2 set as OUTPUT Pin
000054 982a                      CBI PORTB, PB2   ; LED OFF
                                 
000055 9824                      CBI DDRB, PB4    ; PB4 set as INPUT pin
000056 9a2c                      SBI PORTB, PB4   ; Enable internal pull-up resistor
                                 
                                 loop:
                                 ; check if push button is pressed
000057 9b1c                      SBIS PINB, PB4   ; if not pressed, skip next line if the PINB reg. bit# 4 is 1
000058 c012                      rjmp L1
                                 
                                 ; PB4 is pressed
000059 982b                      CBI PORTB, PB3   ; LED OFF
00005a 9a2a                      SBI PORTB, PB2   ; LED ON
00005b c013                      rjmp RED_ON_LCD
00005c 932f
00005d 938f
00005e 939f
00005f e02a
000060 e38e
000061 e99c
000062 9701
000063 f7f1
000064 952a
000065 f7d1
000066 0000
000067 919f
000068 918f
000069 912f                      delay 100
00006a cfec                      rjmp loop
                                 
                                 L1:
                                 ; PB4 is not pressed
00006b 9a2b                      SBI PORTB, PB3   ; LED ON
00006c 982a                      CBI PORTB, PB2   ; LED OFF
00006d c258                      rjmp GREEN_ON_LCD
00006e cfe8                      rjmp loop
                                 
                                 RED_ON_LCD:
00006f 930f
000070 e40c
000071 b90b
000072 9a28
000073 9a29
000074 932f
000075 938f
000076 939f
000077 e021
000078 e38e
000079 e99c
00007a 9701
00007b f7f1
00007c 952a
00007d f7d1
00007e 0000
00007f 919f
000080 918f
000081 912f
000082 9829
000083 e000
000084 b90b
000085 910f                      LCD_send_a_character 0x4C ; 'L'
000086 930f
000087 e409
000088 b90b
000089 9a28
00008a 9a29
00008b 932f
00008c 938f
00008d 939f
00008e e021
00008f e38e
000090 e99c
000091 9701
000092 f7f1
000093 952a
000094 f7d1
000095 0000
000096 919f
000097 918f
000098 912f
000099 9829
00009a e000
00009b b90b
00009c 910f                      LCD_send_a_character 0x49 ; 'I'
00009d 930f
00009e e407
00009f b90b
0000a0 9a28
0000a1 9a29
0000a2 932f
0000a3 938f
0000a4 939f
0000a5 e021
0000a6 e38e
0000a7 e99c
0000a8 9701
0000a9 f7f1
0000aa 952a
0000ab f7d1
0000ac 0000
0000ad 919f
0000ae 918f
0000af 912f
0000b0 9829
0000b1 e000
0000b2 b90b
0000b3 910f                      LCD_send_a_character 0x47 ; 'G'
0000b4 930f
0000b5 e408
0000b6 b90b
0000b7 9a28
0000b8 9a29
0000b9 932f
0000ba 938f
0000bb 939f
0000bc e021
0000bd e38e
0000be e99c
0000bf 9701
0000c0 f7f1
0000c1 952a
0000c2 f7d1
0000c3 0000
0000c4 919f
0000c5 918f
0000c6 912f
0000c7 9829
0000c8 e000
0000c9 b90b
0000ca 910f                      LCD_send_a_character 0x48 ; 'H'
0000cb 930f
0000cc e504
0000cd b90b
0000ce 9a28
0000cf 9a29
0000d0 932f
0000d1 938f
0000d2 939f
0000d3 e021
0000d4 e38e
0000d5 e99c
0000d6 9701
0000d7 f7f1
0000d8 952a
0000d9 f7d1
0000da 0000
0000db 919f
0000dc 918f
0000dd 912f
0000de 9829
0000df e000
0000e0 b90b
0000e1 910f                      LCD_send_a_character 0x54 ; 'T'
0000e2 930f
0000e3 e200
0000e4 b90b
0000e5 9a28
0000e6 9a29
0000e7 932f
0000e8 938f
0000e9 939f
0000ea e021
0000eb e38e
0000ec e99c
0000ed 9701
0000ee f7f1
0000ef 952a
0000f0 f7d1
0000f1 0000
0000f2 919f
0000f3 918f
0000f4 912f
0000f5 9829
0000f6 e000
0000f7 b90b
0000f8 910f                      LCD_send_a_character 0x20 ; ' ' (space)
0000f9 930f
0000fa e409
0000fb b90b
0000fc 9a28
0000fd 9a29
0000fe 932f
0000ff 938f
000100 939f
000101 e021
000102 e38e
000103 e99c
000104 9701
000105 f7f1
000106 952a
000107 f7d1
000108 0000
000109 919f
00010a 918f
00010b 912f
00010c 9829
00010d e000
00010e b90b
00010f 910f                      LCD_send_a_character 0x49 ; 'I'
000110 930f
000111 e40e
000112 b90b
000113 9a28
000114 9a29
000115 932f
000116 938f
000117 939f
000118 e021
000119 e38e
00011a e99c
00011b 9701
00011c f7f1
00011d 952a
00011e f7d1
00011f 0000
000120 919f
000121 918f
000122 912f
000123 9829
000124 e000
000125 b90b
000126 910f                      LCD_send_a_character 0x4E ; 'N'
000127 930f
000128 e504
000129 b90b
00012a 9a28
00012b 9a29
00012c 932f
00012d 938f
00012e 939f
00012f e021
000130 e38e
000131 e99c
000132 9701
000133 f7f1
000134 952a
000135 f7d1
000136 0000
000137 919f
000138 918f
000139 912f
00013a 9829
00013b e000
00013c b90b
00013d 910f                      LCD_send_a_character 0x54 ; 'T'
00013e 930f
00013f e405
000140 b90b
000141 9a28
000142 9a29
000143 932f
000144 938f
000145 939f
000146 e021
000147 e38e
000148 e99c
000149 9701
00014a f7f1
00014b 952a
00014c f7d1
00014d 0000
00014e 919f
00014f 918f
000150 912f
000151 9829
000152 e000
000153 b90b
000154 910f                      LCD_send_a_character 0x45 ; 'E'
000155 930f
000156 e40e
000157 b90b
000158 9a28
000159 9a29
00015a 932f
00015b 938f
00015c 939f
00015d e021
00015e e38e
00015f e99c
000160 9701
000161 f7f1
000162 952a
000163 f7d1
000164 0000
000165 919f
000166 918f
000167 912f
000168 9829
000169 e000
00016a b90b
00016b 910f                      LCD_send_a_character 0x4E ; 'N'
00016c 930f
00016d e503
00016e b90b
00016f 9a28
000170 9a29
000171 932f
000172 938f
000173 939f
000174 e021
000175 e38e
000176 e99c
000177 9701
000178 f7f1
000179 952a
00017a f7d1
00017b 0000
00017c 919f
00017d 918f
00017e 912f
00017f 9829
000180 e000
000181 b90b
000182 910f                      LCD_send_a_character 0x53 ; 'S'
000183 930f
000184 e409
000185 b90b
000186 9a28
000187 9a29
000188 932f
000189 938f
00018a 939f
00018b e021
00018c e38e
00018d e99c
00018e 9701
00018f f7f1
000190 952a
000191 f7d1
000192 0000
000193 919f
000194 918f
000195 912f
000196 9829
000197 e000
000198 b90b
000199 910f                      LCD_send_a_character 0x49 ; 'I'
00019a 930f
00019b e504
00019c b90b
00019d 9a28
00019e 9a29
00019f 932f
0001a0 938f
0001a1 939f
0001a2 e021
0001a3 e38e
0001a4 e99c
0001a5 9701
0001a6 f7f1
0001a7 952a
0001a8 f7d1
0001a9 0000
0001aa 919f
0001ab 918f
0001ac 912f
0001ad 9829
0001ae e000
0001af b90b
0001b0 910f                      LCD_send_a_character 0x54 ; 'T'
0001b1 930f
0001b2 e509
0001b3 b90b
0001b4 9a28
0001b5 9a29
0001b6 932f
0001b7 938f
0001b8 939f
0001b9 e021
0001ba e38e
0001bb e99c
0001bc 9701
0001bd f7f1
0001be 952a
0001bf f7d1
0001c0 0000
0001c1 919f
0001c2 918f
0001c3 912f
0001c4 9829
0001c5 e000
0001c6 b90b
0001c7 910f                      LCD_send_a_character 0x59 ; 'Y'
0001c8 930f
0001c9 ec00
0001ca b90b
0001cb 9828
0001cc 9a29
0001cd 932f
0001ce 938f
0001cf 939f
0001d0 e021
0001d1 e38e
0001d2 e99c
0001d3 9701
0001d4 f7f1
0001d5 952a
0001d6 f7d1
0001d7 0000
0001d8 919f
0001d9 918f
0001da 912f
0001db 9829
0001dc e000
0001dd b90b
0001de 910f                      LCD_send_a_command 0xC0 ; move curser to next line
0001df 930f
0001e0 e200
0001e1 b90b
0001e2 9a28
0001e3 9a29
0001e4 932f
0001e5 938f
0001e6 939f
0001e7 e021
0001e8 e38e
0001e9 e99c
0001ea 9701
0001eb f7f1
0001ec 952a
0001ed f7d1
0001ee 0000
0001ef 919f
0001f0 918f
0001f1 912f
0001f2 9829
0001f3 e000
0001f4 b90b
0001f5 910f                      LCD_send_a_character 0x20 ; ' ' (space)
0001f6 930f
0001f7 e200
0001f8 b90b
0001f9 9a28
0001fa 9a29
0001fb 932f
0001fc 938f
0001fd 939f
0001fe e021
0001ff e38e
000200 e99c
000201 9701
000202 f7f1
000203 952a
000204 f7d1
000205 0000
000206 919f
000207 918f
000208 912f
000209 9829
00020a e000
00020b b90b
00020c 910f                      LCD_send_a_character 0x20 ; ' ' (space)
00020d 930f
00020e e200
00020f b90b
000210 9a28
000211 9a29
000212 932f
000213 938f
000214 939f
000215 e021
000216 e38e
000217 e99c
000218 9701
000219 f7f1
00021a 952a
00021b f7d1
00021c 0000
00021d 919f
00021e 918f
00021f 912f
000220 9829
000221 e000
000222 b90b
000223 910f                      LCD_send_a_character 0x20 ; ' ' (space)
000224 930f
000225 e200
000226 b90b
000227 9a28
000228 9a29
000229 932f
00022a 938f
00022b 939f
00022c e021
00022d e38e
00022e e99c
00022f 9701
000230 f7f1
000231 952a
000232 f7d1
000233 0000
000234 919f
000235 918f
000236 912f
000237 9829
000238 e000
000239 b90b
00023a 910f                      LCD_send_a_character 0x20 ; ' ' (space)
00023b 930f
00023c e200
00023d b90b
00023e 9a28
00023f 9a29
000240 932f
000241 938f
000242 939f
000243 e021
000244 e38e
000245 e99c
000246 9701
000247 f7f1
000248 952a
000249 f7d1
00024a 0000
00024b 919f
00024c 918f
00024d 912f
00024e 9829
00024f e000
000250 b90b
000251 910f                      LCD_send_a_character 0x20 ; ' ' (space)
000252 930f
000253 e200
000254 b90b
000255 9a28
000256 9a29
000257 932f
000258 938f
000259 939f
00025a e021
00025b e38e
00025c e99c
00025d 9701
00025e f7f1
00025f 952a
000260 f7d1
000261 0000
000262 919f
000263 918f
000264 912f
000265 9829
000266 e000
000267 b90b
000268 910f                      LCD_send_a_character 0x20 ; ' ' (space)
000269 930f
00026a e200
00026b b90b
00026c 9a28
00026d 9a29
00026e 932f
00026f 938f
000270 939f
000271 e021
000272 e38e
000273 e99c
000274 9701
000275 f7f1
000276 952a
000277 f7d1
000278 0000
000279 919f
00027a 918f
00027b 912f
00027c 9829
00027d e000
00027e b90b
00027f 910f                      LCD_send_a_character 0x20 ; ' ' (space)
                                 
000280 930f
000281 e40c
000282 b90b
000283 9a28
000284 9a29
000285 932f
000286 938f
000287 939f
000288 e021
000289 e38e
00028a e99c
00028b 9701
00028c f7f1
00028d 952a
00028e f7d1
00028f 0000
000290 919f
000291 918f
000292 912f
000293 9829
000294 e000
000295 b90b
000296 910f                      LCD_send_a_character 0x4C ; 'L'
000297 930f
000298 e40f
000299 b90b
00029a 9a28
00029b 9a29
00029c 932f
00029d 938f
00029e 939f
00029f e021
0002a0 e38e
0002a1 e99c
0002a2 9701
0002a3 f7f1
0002a4 952a
0002a5 f7d1
0002a6 0000
0002a7 919f
0002a8 918f
0002a9 912f
0002aa 9829
0002ab e000
0002ac b90b
0002ad 910f                      LCD_send_a_character 0x4F ; 'A'
0002ae 930f
0002af e507
0002b0 b90b
0002b1 9a28
0002b2 9a29
0002b3 932f
0002b4 938f
0002b5 939f
0002b6 e021
0002b7 e38e
0002b8 e99c
0002b9 9701
0002ba f7f1
0002bb 952a
0002bc f7d1
0002bd 0000
0002be 919f
0002bf 918f
0002c0 912f
0002c1 9829
0002c2 e000
0002c3 b90b
0002c4 910f                      LCD_send_a_character 0x57 ; 'B'
0002c5 9518                      reti
                                 
                                 GREEN_ON_LCD:
0002c6 930f
0002c7 e40c
0002c8 b90b
0002c9 9a28
0002ca 9a29
0002cb 932f
0002cc 938f
0002cd 939f
0002ce e021
0002cf e38e
0002d0 e99c
0002d1 9701
0002d2 f7f1
0002d3 952a
0002d4 f7d1
0002d5 0000
0002d6 919f
0002d7 918f
0002d8 912f
0002d9 9829
0002da e000
0002db b90b
0002dc 910f                      LCD_send_a_character 0x4C ; 'L'
0002dd 930f
0002de e409
0002df b90b
0002e0 9a28
0002e1 9a29
0002e2 932f
0002e3 938f
0002e4 939f
0002e5 e021
0002e6 e38e
0002e7 e99c
0002e8 9701
0002e9 f7f1
0002ea 952a
0002eb f7d1
0002ec 0000
0002ed 919f
0002ee 918f
0002ef 912f
0002f0 9829
0002f1 e000
0002f2 b90b
0002f3 910f                      LCD_send_a_character 0x49 ; 'I'
0002f4 930f
0002f5 e407
0002f6 b90b
0002f7 9a28
0002f8 9a29
0002f9 932f
0002fa 938f
0002fb 939f
0002fc e021
0002fd e38e
0002fe e99c
0002ff 9701
000300 f7f1
000301 952a
000302 f7d1
000303 0000
000304 919f
000305 918f
000306 912f
000307 9829
000308 e000
000309 b90b
00030a 910f                      LCD_send_a_character 0x47 ; 'G'
00030b 930f
00030c e408
00030d b90b
00030e 9a28
00030f 9a29
000310 932f
000311 938f
000312 939f
000313 e021
000314 e38e
000315 e99c
000316 9701
000317 f7f1
000318 952a
000319 f7d1
00031a 0000
00031b 919f
00031c 918f
00031d 912f
00031e 9829
00031f e000
000320 b90b
000321 910f                      LCD_send_a_character 0x48 ; 'H'
000322 930f
000323 e504
000324 b90b
000325 9a28
000326 9a29
000327 932f
000328 938f
000329 939f
00032a e021
00032b e38e
00032c e99c
00032d 9701
00032e f7f1
00032f 952a
000330 f7d1
000331 0000
000332 919f
000333 918f
000334 912f
000335 9829
000336 e000
000337 b90b
000338 910f                      LCD_send_a_character 0x54 ; 'T'
000339 930f
00033a e200
00033b b90b
00033c 9a28
00033d 9a29
00033e 932f
00033f 938f
000340 939f
000341 e021
000342 e38e
000343 e99c
000344 9701
000345 f7f1
000346 952a
000347 f7d1
000348 0000
000349 919f
00034a 918f
00034b 912f
00034c 9829
00034d e000
00034e b90b
00034f 910f                      LCD_send_a_character 0x20 ; ' ' (space)
000350 930f
000351 e409
000352 b90b
000353 9a28
000354 9a29
000355 932f
000356 938f
000357 939f
000358 e021
000359 e38e
00035a e99c
00035b 9701
00035c f7f1
00035d 952a
00035e f7d1
00035f 0000
000360 919f
000361 918f
000362 912f
000363 9829
000364 e000
000365 b90b
000366 910f                      LCD_send_a_character 0x49 ; 'I'
000367 930f
000368 e40e
000369 b90b
00036a 9a28
00036b 9a29
00036c 932f
00036d 938f
00036e 939f
00036f e021
000370 e38e
000371 e99c
000372 9701
000373 f7f1
000374 952a
000375 f7d1
000376 0000
000377 919f
000378 918f
000379 912f
00037a 9829
00037b e000
00037c b90b
00037d 910f                      LCD_send_a_character 0x4E ; 'N'
00037e 930f
00037f e504
000380 b90b
000381 9a28
000382 9a29
000383 932f
000384 938f
000385 939f
000386 e021
000387 e38e
000388 e99c
000389 9701
00038a f7f1
00038b 952a
00038c f7d1
00038d 0000
00038e 919f
00038f 918f
000390 912f
000391 9829
000392 e000
000393 b90b
000394 910f                      LCD_send_a_character 0x54 ; 'T'
000395 930f
000396 e405
000397 b90b
000398 9a28
000399 9a29
00039a 932f
00039b 938f
00039c 939f
00039d e021
00039e e38e
00039f e99c
0003a0 9701
0003a1 f7f1
0003a2 952a
0003a3 f7d1
0003a4 0000
0003a5 919f
0003a6 918f
0003a7 912f
0003a8 9829
0003a9 e000
0003aa b90b
0003ab 910f                      LCD_send_a_character 0x45 ; 'E'
0003ac 930f
0003ad e40e
0003ae b90b
0003af 9a28
0003b0 9a29
0003b1 932f
0003b2 938f
0003b3 939f
0003b4 e021
0003b5 e38e
0003b6 e99c
0003b7 9701
0003b8 f7f1
0003b9 952a
0003ba f7d1
0003bb 0000
0003bc 919f
0003bd 918f
0003be 912f
0003bf 9829
0003c0 e000
0003c1 b90b
0003c2 910f                      LCD_send_a_character 0x4E ; 'N'
0003c3 930f
0003c4 e503
0003c5 b90b
0003c6 9a28
0003c7 9a29
0003c8 932f
0003c9 938f
0003ca 939f
0003cb e021
0003cc e38e
0003cd e99c
0003ce 9701
0003cf f7f1
0003d0 952a
0003d1 f7d1
0003d2 0000
0003d3 919f
0003d4 918f
0003d5 912f
0003d6 9829
0003d7 e000
0003d8 b90b
0003d9 910f                      LCD_send_a_character 0x53 ; 'S'
0003da 930f
0003db e409
0003dc b90b
0003dd 9a28
0003de 9a29
0003df 932f
0003e0 938f
0003e1 939f
0003e2 e021
0003e3 e38e
0003e4 e99c
0003e5 9701
0003e6 f7f1
0003e7 952a
0003e8 f7d1
0003e9 0000
0003ea 919f
0003eb 918f
0003ec 912f
0003ed 9829
0003ee e000
0003ef b90b
0003f0 910f                      LCD_send_a_character 0x49 ; 'I'
0003f1 930f
0003f2 e504
0003f3 b90b
0003f4 9a28
0003f5 9a29
0003f6 932f
0003f7 938f
0003f8 939f
0003f9 e021
0003fa e38e
0003fb e99c
0003fc 9701
0003fd f7f1
0003fe 952a
0003ff f7d1
000400 0000
000401 919f
000402 918f
000403 912f
000404 9829
000405 e000
000406 b90b
000407 910f                      LCD_send_a_character 0x54 ; 'T'
000408 930f
000409 e509
00040a b90b
00040b 9a28
00040c 9a29
00040d 932f
00040e 938f
00040f 939f
000410 e021
000411 e38e
000412 e99c
000413 9701
000414 f7f1
000415 952a
000416 f7d1
000417 0000
000418 919f
000419 918f
00041a 912f
00041b 9829
00041c e000
00041d b90b
00041e 910f                      LCD_send_a_character 0x59 ; 'Y'
00041f 930f
000420 ec00
000421 b90b
000422 9828
000423 9a29
000424 932f
000425 938f
000426 939f
000427 e021
000428 e38e
000429 e99c
00042a 9701
00042b f7f1
00042c 952a
00042d f7d1
00042e 0000
00042f 919f
000430 918f
000431 912f
000432 9829
000433 e000
000434 b90b
000435 910f                      LCD_send_a_command 0xC0 ; move curser to next line
000436 930f
000437 e200
000438 b90b
000439 9a28
00043a 9a29
00043b 932f
00043c 938f
00043d 939f
00043e e021
00043f e38e
000440 e99c
000441 9701
000442 f7f1
000443 952a
000444 f7d1
000445 0000
000446 919f
000447 918f
000448 912f
000449 9829
00044a e000
00044b b90b
00044c 910f                      LCD_send_a_character 0x20 ; ' ' (space)
00044d 930f
00044e e200
00044f b90b
000450 9a28
000451 9a29
000452 932f
000453 938f
000454 939f
000455 e021
000456 e38e
000457 e99c
000458 9701
000459 f7f1
00045a 952a
00045b f7d1
00045c 0000
00045d 919f
00045e 918f
00045f 912f
000460 9829
000461 e000
000462 b90b
000463 910f                      LCD_send_a_character 0x20 ; ' ' (space)
000464 930f
000465 e200
000466 b90b
000467 9a28
000468 9a29
000469 932f
00046a 938f
00046b 939f
00046c e021
00046d e38e
00046e e99c
00046f 9701
000470 f7f1
000471 952a
000472 f7d1
000473 0000
000474 919f
000475 918f
000476 912f
000477 9829
000478 e000
000479 b90b
00047a 910f                      LCD_send_a_character 0x20 ; ' ' (space)
00047b 930f
00047c e200
00047d b90b
00047e 9a28
00047f 9a29
000480 932f
000481 938f
000482 939f
000483 e021
000484 e38e
000485 e99c
000486 9701
000487 f7f1
000488 952a
000489 f7d1
00048a 0000
00048b 919f
00048c 918f
00048d 912f
00048e 9829
00048f e000
000490 b90b
000491 910f                      LCD_send_a_character 0x20 ; ' ' (space)
000492 930f
000493 e200
000494 b90b
000495 9a28
000496 9a29
000497 932f
000498 938f
000499 939f
00049a e021
00049b e38e
00049c e99c
00049d 9701
00049e f7f1
00049f 952a
0004a0 f7d1
0004a1 0000
0004a2 919f
0004a3 918f
0004a4 912f
0004a5 9829
0004a6 e000
0004a7 b90b
0004a8 910f                      LCD_send_a_character 0x20 ; ' ' (space)
0004a9 930f
0004aa e200
0004ab b90b
0004ac 9a28
0004ad 9a29
0004ae 932f
0004af 938f
0004b0 939f
0004b1 e021
0004b2 e38e
0004b3 e99c
0004b4 9701
0004b5 f7f1
0004b6 952a
0004b7 f7d1
0004b8 0000
0004b9 919f
0004ba 918f
0004bb 912f
0004bc 9829
0004bd e000
0004be b90b
0004bf 910f                      LCD_send_a_character 0x20 ; ' ' (space)
                                 
0004c0 930f
0004c1 e408
0004c2 b90b
0004c3 9a28
0004c4 9a29
0004c5 932f
0004c6 938f
0004c7 939f
0004c8 e021
0004c9 e38e
0004ca e99c
0004cb 9701
0004cc f7f1
0004cd 952a
0004ce f7d1
0004cf 0000
0004d0 919f
0004d1 918f
0004d2 912f
0004d3 9829
0004d4 e000
0004d5 b90b
0004d6 910f                      LCD_send_a_character 0x48 ; 'H'
0004d7 930f
0004d8 e409
0004d9 b90b
0004da 9a28
0004db 9a29
0004dc 932f
0004dd 938f
0004de 939f
0004df e021
0004e0 e38e
0004e1 e99c
0004e2 9701
0004e3 f7f1
0004e4 952a
0004e5 f7d1
0004e6 0000
0004e7 919f
0004e8 918f
0004e9 912f
0004ea 9829
0004eb e000
0004ec b90b
0004ed 910f                      LCD_send_a_character 0x49 ; 'I'
0004ee 930f
0004ef e407
0004f0 b90b
0004f1 9a28
0004f2 9a29
0004f3 932f
0004f4 938f
0004f5 939f
0004f6 e021
0004f7 e38e
0004f8 e99c
0004f9 9701
0004fa f7f1
0004fb 952a
0004fc f7d1
0004fd 0000
0004fe 919f
0004ff 918f
000500 912f
000501 9829
000502 e000
000503 b90b
000504 910f                      LCD_send_a_character 0x47 ; 'G'
000505 930f
000506 e408
000507 b90b
000508 9a28
000509 9a29
00050a 932f
00050b 938f
00050c 939f
00050d e021
00050e e38e
00050f e99c
000510 9701
000511 f7f1
000512 952a
000513 f7d1
000514 0000
000515 919f
000516 918f
000517 912f
000518 9829
000519 e000
00051a b90b
00051b 910f                      LCD_send_a_character 0x48 ; 'H'
00051c 9518                      reti
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 330 r17:   0 r18: 224 r19:   0 r20:   0 
r21:   0 r22:   0 r23:   0 r24: 224 r25: 168 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   0 r31:   0 
Registers used: 4 out of 35 (11.4%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  : 112 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  65 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   0 cpse  :   0 dec   :  56 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   0 jmp   :   0 
ld    :   0 ldd   :   0 ldi   : 278 lds   :   0 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  56 or    :   0 ori   :   0 out   : 110 pop   : 223 
push  : 223 rcall :   0 ret   :   0 reti  :   2 rjmp  :   5 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   : 122 sbic  :   0 sbis  :   1 
sbiw  :  56 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 13 out of 113 (11.5%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a3a   2618      0   2618   32768   8.0%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
